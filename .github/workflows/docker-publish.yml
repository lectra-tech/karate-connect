name: Docker Build & Publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'refs/tags/') }}

env:
  ORIGIN_REPOSITORY: lectra-tech/karate-connect
  # Dockerhub
  REGISTRY: docker.io
  REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/karate-connect
  RELEASE_MODE: false

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:3
        ports:
          - 5000:5000

    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect a forked repository
        if: ${{ github.repository != env.ORIGIN_REPOSITORY }}
        run: |
          echo "REGISTRY=ghcr.io" >> "$GITHUB_ENV"
          echo "REGISTRY_USERNAME=${{ github.actor }}" >> "$GITHUB_ENV"
          echo "REGISTRY_PASSWORD=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=${{ github.repository }}" >> "$GITHUB_ENV"

      - name: Detect a release
        if: ${{ contains(github.ref, 'refs/tags/') }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
          echo "RELEASE_MODE=true" >> $GITHUB_ENV

      - name: Local registry if not in release mode
        if: ${{ env.RELEASE_MODE != 'true' }}
        run: |
          echo "REGISTRY=localhost:5000" >> $GITHUB_ENV

      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: ${{ env.RELEASE_MODE == 'true' && github.repository == env.ORIGIN_REPOSITORY }}
        uses: sigstore/cosign-installer@fb28c2b6339dcd94da6e4cbcbc5e888961f6f8c3 # v3.9.0
        with:
          cosign-release: 'v2.5.2'

      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata - builder
        id: meta-builder
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: localhost:5000/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},suffix=-builder
            type=ref,event=branch

      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata - minimal
        id: meta-minimal
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},suffix=-minimal
            type=ref,event=branch

      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata - python
        id: meta-python
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: localhost:5000/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},suffix=-python
            type=ref,event=branch

      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata - nominal
        id: meta-nominal
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch

      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata - aks
        id: meta-aks
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},suffix=-aks
            type=ref,event=branch
            
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: network=host

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ env.RELEASE_MODE == 'true' }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image - builder
        id: build-and-push-builder
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile_builder
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-builder.outputs.tags }}
          labels: ${{ steps.meta-builder.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload jar in release
        if: ${{ env.RELEASE_MODE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker container create --name temp-container ${{ steps.meta-builder.outputs.tags }}
          docker container cp temp-container:/build/libs libs/
          docker container rm temp-container
          if gh release view "${{ env.TAG_NAME }}" > /dev/null 2>&1; then
            echo "Release ${{ env.TAG_NAME }} already exists"
          else
            echo "Release ${{ env.TAG_NAME }} does not exist"
            gh release create "${{ env.TAG_NAME }}" --title="${{ env.TAG_NAME }}" --generate-notes
          fi
          gh release upload "${{ env.TAG_NAME }}" libs/karate-connect-*-standalone.jar --clobber

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image - minimal
        id: build-and-push-minimal
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile_minimal
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-minimal.outputs.tags }}
          labels: ${{ steps.meta-minimal.outputs.labels }}
          build-args: |
            BUILDER_IMAGE=${{ steps.meta-builder.outputs.tags }}
            BUILDPLATFORM=linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image - python
        id: build-and-push-python
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile_python
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-python.outputs.tags }}
          labels: ${{ steps.meta-python.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ steps.meta-minimal.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image - nominal
        id: build-and-push-nominal
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile_nominal
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-nominal.outputs.tags }}
          labels: ${{ steps.meta-nominal.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ steps.meta-python.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image - aks
        id: build-and-push-aks
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile_aks
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-aks.outputs.tags }}
          labels: ${{ steps.meta-aks.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ steps.meta-python.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image - minimal
        if: ${{ env.RELEASE_MODE == 'true' && github.repository == env.ORIGIN_REPOSITORY }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta-minimal.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-minimal.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image - nominal
        if: ${{ env.RELEASE_MODE == 'true' && github.repository == env.ORIGIN_REPOSITORY }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta-nominal.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-nominal.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image - aks
        if: ${{ env.RELEASE_MODE == 'true' && github.repository == env.ORIGIN_REPOSITORY }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta-aks.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-aks.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
